//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package sintactico;



//#line 2 "..\..\src\sintactico\sinj.y"
/* * Declaraciones de código Java*/
/* * Se sitúan al comienzo del archivo generado*/
/* * El package lo añade yacc si utilizamos la opción -Jpackage*/
import lexico.Lexico;
import java.io.Reader;
import ast.*;
import ast.tipos.*;
import java.util.List;
import java.util.ArrayList;
//#line 27 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//## **user defined:Object
String   yytext;//user variable to return contextual strings
Object yyval; //used to return semantic vals from action routines
Object yylval;//the 'lval' (result) I got from yylex()
Object valstk[] = new Object[YYSTACKSIZE];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
final void val_init()
{
  yyval=new Object();
  yylval=new Object();
  valptr=-1;
}
final void val_push(Object val)
{
  try {
    valptr++;
    valstk[valptr]=val;
  }
  catch (ArrayIndexOutOfBoundsException e) {
    int oldsize = valstk.length;
    int newsize = oldsize*2;
    Object[] newstack = new Object[newsize];
    System.arraycopy(valstk,0,newstack,0,oldsize);
    valstk = newstack;
    valstk[valptr]=val;
  }
}
final Object val_pop()
{
  return valstk[valptr--];
}
final void val_drop(int cnt)
{
  valptr -= cnt;
}
final Object val_peek(int relative)
{
  return valstk[valptr-relative];
}
final Object dup_yyval(Object val)
{
  return val;
}
//#### end semantic value section ####
public final static short CTE_ENTERA=257;
public final static short ID=258;
public final static short MAIN=259;
public final static short READ=260;
public final static short WRITE=261;
public final static short WHILE=262;
public final static short IF=263;
public final static short ELSE=264;
public final static short INT=265;
public final static short DOUBLE=266;
public final static short CHAR=267;
public final static short IGUALDAD=268;
public final static short DISTINTO=269;
public final static short MAYORIGUAL=270;
public final static short MENORIGUAL=271;
public final static short CTE_REAL=272;
public final static short CTE_CARACTER=273;
public final static short CTE_STRING=274;
public final static short O=275;
public final static short Y=276;
public final static short VOID=277;
public final static short STRUCT=278;
public final static short RETURN=279;
public final static short MASMAS=280;
public final static short MENOSMENOS=281;
public final static short INTERROG=282;
public final static short DOSPUNTOS=283;
public final static short CONDICIONELSE=284;
public final static short MENOSUNARIO=285;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    2,    3,    3,    5,    5,    1,    1,    9,    9,
    9,    7,    7,    4,    4,   11,   11,   11,   11,   11,
   11,   11,   11,   11,   11,   11,   11,   15,   15,   14,
   14,   16,   16,   16,   13,   13,   10,   10,   18,   18,
    6,    6,    6,    8,    8,   20,   19,   19,   17,   17,
   22,   22,   21,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   12,
};
final static short yylen[] = {                            2,
    2,    6,    2,    0,    3,    3,    2,    0,    3,    3,
    1,    1,    3,    2,    0,    4,    3,    3,    1,    1,
    3,    5,    4,    3,    3,    3,    3,    5,    7,    6,
    8,    2,    4,    0,    1,    3,    9,    9,    1,    1,
    1,    1,    1,    4,    4,    3,    2,    0,    2,    0,
    3,    0,    2,    3,    3,    3,    3,    3,    2,    2,
    2,    2,    2,    1,    1,    1,    1,    4,    3,    4,
    3,    4,    3,    3,    3,    3,    3,    3,    3,    3,
    2,    3,    7,
};
final static short yydefred[] = {                         8,
    0,    0,   41,   42,   43,    0,    0,    1,    0,    0,
    7,   11,    0,    0,    0,   48,    0,    0,   12,    0,
    0,    0,    4,    0,    0,    9,    0,   10,    0,    0,
    0,    0,    0,   45,   39,   40,    0,   47,    0,   13,
   44,   53,    0,    0,   49,    0,    3,    0,    0,    0,
    0,    4,    0,   64,    0,    0,    0,    0,    0,   67,
   66,    0,    0,    0,    0,    0,    0,    2,   14,    0,
   19,   20,    0,    0,   46,    4,    0,   51,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    5,    6,    0,    0,    0,    0,    0,    0,
    0,   60,   61,    0,   17,   18,    0,    0,   21,   26,
   27,    0,    0,   69,    0,    0,    0,    0,    0,    0,
   24,   25,    0,    0,    0,    0,    0,    0,    0,    0,
   82,    0,    0,   38,   23,    0,   71,    0,   36,    0,
    0,    0,    0,   16,   68,   37,   22,   70,   15,   28,
   15,    0,    0,    0,    0,    0,   30,    0,   29,    0,
   15,   32,   83,   31,    0,   33,
};
final static short yydgoto[] = {                          1,
    2,    8,   33,   46,   47,   30,   18,   49,   11,   12,
   69,   70,   84,   71,   72,  177,   31,   13,   24,   38,
   32,   45,
};
final static short yysindex[] = {                         0,
    0, -197,    0,    0,    0, -223, -103,    0, -232, -209,
    0,    0,  -30,   16,  -65,    0,   32,  -15,    0,  -11,
 -180, -177,    0, -120, -177,    0, -179,    0,   -2, -165,
   53,   51, -181,    0,    0,    0,  -87,    0,   55,    0,
    0,    0,  -22, -177,    0,  -33,    0, -209, -209,    1,
  -20,    0,   51,    0,   58,  162,  162,   59,   62,    0,
    0,  162,  162,  162,  162,  162,  236,    0,    0,  773,
    0,    0,    7,   15,    0,    0, -181,    0,  111,   64,
  162,  162,  920,   46,   50,  162,  162,  941,  -21,  -19,
  -24,  -88,   69,  679,  162,  162,  162,  162,  162,  162,
   52,   54,  162,  162,  162,  162,  162,  162,  162,  162,
 -144,  162,    0,    0, -181,   -8,   56,   75,  137, -216,
 -216,    0,    0,  162,    0,    0,  967, 1014,    0,    0,
    0,  162,  162,    0,  -24,  -24,  -24,  -24,  -24,  -24,
    0,    0, 1035,  -24,  -24,  -36,  -36,  -44,  -44,  -44,
    0, 1056,   17,    0,    0,   60,    0,   79,    0,   42,
   67, -216,  653,    0,    0,    0,    0,    0,    0,    0,
    0, -142,  162,   92,  117,  143,    0, 1078,    0, -142,
    0,    0,    0,    0,  168,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,   33,   35,
    0,    0,    0,    0,    0,    0,   19,    0,    0,    0,
    0,   82,    0,    0,   82,    0,    0,    0,    0,    0,
    0,   86,  193,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   33,   35,    0,
    0,    0,   86,    0, 1111,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  193,    0,    0,  477,
    0,    0,  -25,    0,    0,    0,    0,    0, 1754, 1766,
 1258,  583,    0,    0,    0,    0,    0,    0,    0,    0,
 1137, 1207,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  193,    0, 1323,    0,    0,  503,
  530,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1430, 1452, 1476, 1502, 1512, 1571,
    0,    0,    0, 1580, 1648, 1392, 1401,  609,  618,  644,
    0,    0,    0,    0,    0, 1378,    0,    0,    0,    0,
    0,  556,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  218,    0,    0,    0,    0,    0,    0,    0,  218,
    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0,  -35,  -63,    0,    6,    5,   22,    0,    0,
 -133, 1802,  -48,    0,    0,  -52,  104,  106,    0,    0,
   87,   80,
};
final static int YYTABLESIZE=2042;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         65,
  110,  111,  112,   21,   34,  108,   67,    9,   85,  111,
  109,   66,  110,  116,   20,   35,   77,  108,  106,   16,
  107,  111,  109,   10,   65,   17,  170,  172,   27,   35,
  118,   67,   27,   35,   14,   15,   66,  130,   48,  131,
  115,   50,  182,   26,   27,   36,  112,   28,   19,   65,
   27,  153,   73,   74,  112,   22,   67,   23,   27,   75,
   21,   66,   12,  122,  123,  113,  112,    3,    4,    5,
  158,   25,   93,  114,   65,  159,   29,   12,   40,    6,
    7,   67,   48,    3,    4,    5,   66,    3,    4,    5,
   41,   68,   42,   43,   44,   51,    7,   79,   86,   65,
   52,   87,   76,  119,  125,  174,   67,  175,  126,  132,
  141,   66,  142,  151,  155,  156,  154,  185,  167,  168,
   48,  176,   50,   39,   65,   40,   52,  184,   39,   37,
   53,   67,   78,    0,    0,    0,   66,    0,    0,    0,
    0,  166,    0,   65,    3,    4,    5,    0,    0,   65,
   67,  117,    0,    0,    0,   66,   67,    7,    0,    0,
    0,   66,    0,    0,  169,    0,    0,    0,    0,   65,
   19,    0,    0,    0,    0,   65,   67,  157,    0,    0,
    0,   66,   67,    0,    0,    0,    0,   66,    0,  171,
    0,  122,  123,    0,   65,    0,    0,    0,    0,    0,
   65,   67,    0,    0,    0,    0,   66,   67,    0,    0,
    0,    0,   66,    0,    0,    0,  179,    0,    0,    0,
    0,    0,    0,   54,   55,   15,   56,   57,   58,   59,
    0,    0,   15,    0,    0,  122,  123,   15,   60,   61,
    0,  180,    0,  122,  123,   62,   63,   64,   54,   55,
   34,   56,   57,   58,   59,  122,  123,   34,  122,  123,
  122,  123,   34,   60,   61,  181,    0,    0,   65,    0,
   62,   63,   64,   54,   55,   67,   56,   57,   58,   59,
   66,    0,    0,    0,    0,    0,    0,    0,   60,   61,
    0,    0,  186,    0,    0,   62,   63,   64,   54,   55,
    0,   56,   57,   58,   59,    0,    0,    0,    0,    0,
    0,    0,    0,   60,   61,    0,    0,   15,    0,    0,
   62,   63,   64,   54,   55,    0,   56,   57,   58,   59,
    0,    0,    0,    0,    0,    0,    0,    0,   60,   61,
    0,    0,   34,    0,    0,   62,   63,   64,   54,   55,
    0,   56,   57,   58,   59,    0,    0,    0,    0,    0,
    0,    0,    0,   60,   61,    0,    0,   54,   80,    0,
   62,   63,   64,   54,   55,    0,   56,   57,   58,   59,
    0,    0,   60,   61,    0,    0,    0,    0,   60,   61,
   81,   82,    0,   54,   80,   62,   63,   64,    0,   54,
   55,    0,   56,   57,   58,   59,    0,    0,   60,   61,
    0,    0,    0,    0,   60,   61,   81,   82,   54,   80,
    0,   62,   63,   64,   54,   55,    0,   56,   57,   58,
   59,    0,    0,   60,   61,    0,    0,    0,    0,   60,
   61,   81,   82,    0,    0,    0,   62,   63,   64,   15,
   15,    0,   15,   15,   15,   15,    0,    0,    0,    0,
    0,    0,    0,    0,   15,   15,    0,    0,    0,    0,
    0,   15,   15,   15,   34,   34,    0,   34,   34,   34,
   34,    0,    0,    0,    0,    0,    0,    0,    0,   34,
   34,    0,   54,   80,    0,    0,   34,   34,   34,    0,
    3,    4,    5,    0,    0,    0,    0,   60,   61,    0,
    0,    0,    0,   65,    0,   81,   82,   65,   65,   65,
   65,   65,   65,   65,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   65,   65,   65,   65,   62,
    0,    0,    0,   62,   62,   62,   62,   62,   62,   62,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   62,   62,   62,   62,    0,   63,   65,    0,   65,
   63,   63,   63,   63,   63,   63,   63,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   63,   63,
   63,   63,   72,   62,    0,   62,   72,   72,   72,   72,
   72,   72,   72,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   72,   72,   72,   72,    0,   59,
   63,    0,   63,   59,   59,   59,   59,   59,   59,   59,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   59,   59,   59,   59,   55,   72,    0,   72,   55,
   55,   55,   55,   55,   56,   55,    0,    0,   56,   56,
   56,   56,   56,    0,   56,    0,    0,   55,   55,   55,
   55,    0,    0,    0,    0,   59,   56,   56,   56,   56,
   57,    0,    0,    0,   57,   57,   57,   57,   57,  110,
   57,    0,    0,    0,  108,  106,    0,  107,  111,  109,
    0,   55,   57,   57,   57,   57,    0,    0,    0,    0,
   56,    0,  105,    0,  104,  110,    0,    0,    0,  134,
  108,  106,    0,  107,  111,  109,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   57,    0,  105,    0,
  104,    0,    0,  112,   65,   65,   65,   65,    0,    0,
    0,   65,   65,    0,    0,    0,   65,   65,   65,   65,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  112,
   62,   62,   62,   62,    0,    0,    0,   62,   62,    0,
    0,    0,    0,    0,   62,   62,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   63,   63,   63,
   63,    0,    0,    0,   63,   63,    0,    0,    0,  110,
    0,   63,   63,    0,  108,  106,    0,  107,  111,  109,
    0,    0,    0,   72,   72,   72,   72,    0,    0,    0,
   72,   72,  105,  103,  104,    0,    0,   72,   72,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   59,   59,   59,   59,    0,    0,    0,   59,   59,    0,
    0,    0,    0,  112,   59,   59,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   55,   55,   55,   55,
    0,    0,    0,   55,   55,   56,   56,   56,   56,    0,
   55,   55,   56,   56,    0,    0,    0,    0,    0,   56,
   56,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   57,   57,   57,   57,    0,    0,    0,   57,   57,
   95,   96,   97,   98,    0,   57,   57,   99,  100,    0,
    0,    0,  122,  123,    0,  173,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   95,   96,   97,   98,
    0,    0,    0,   99,  100,    0,  110,    0,  122,  123,
  133,  108,  106,  124,  107,  111,  109,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  110,    0,  105,
    0,  104,  108,  106,    0,  107,  111,  109,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  129,
  105,    0,  104,  110,    0,    0,    0,  160,  108,  106,
  112,  107,  111,  109,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  105,    0,  104,    0,
    0,  112,    0,    0,    0,    0,    0,    0,    0,    0,
   95,   96,   97,   98,    0,    0,    0,   99,  100,    0,
  110,    0,  101,  102,  161,  108,  106,  112,  107,  111,
  109,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  110,    0,  105,    0,  104,  108,  106,    0,  107,
  111,  109,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  110,  164,  105,    0,  104,  108,  106,    0,
  107,  111,  109,    0,  112,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  110,  105,    0,  104,  183,  108,
  106,    0,  107,  111,  109,  112,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  105,    0,  104,
    0,    0,    0,    0,    0,    0,  112,   65,  165,    0,
    0,    0,   65,   65,    0,   65,   65,   65,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  112,    0,
   65,   65,   65,   60,    0,    0,    0,    0,   60,   60,
    0,   60,   60,   60,    0,    0,    0,   95,   96,   97,
   98,    0,    0,    0,   99,  100,   60,   60,   60,  122,
  123,   65,    0,    0,    0,    0,    0,    0,   95,   96,
   97,   98,    0,    0,    0,   99,  100,    0,    0,    0,
  122,  123,    0,    0,    0,    0,    0,   60,    0,    0,
    0,    0,    0,    0,   95,   96,   97,   98,    0,    0,
    0,   99,  100,   61,    0,    0,  122,  123,   61,   61,
    0,   61,   61,   61,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   61,   61,   61,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   95,   96,   97,   98,    0,    0,    0,   99,  100,
    0,    0,    0,  122,  123,    0,    0,   61,   81,    0,
    0,   81,   95,   96,   97,   98,    0,    0,    0,   99,
  100,    0,    0,    0,  122,  123,   81,   81,   81,   81,
    0,    0,    0,   95,   96,   97,   98,    0,    0,    0,
   99,  100,    0,    0,    0,  122,  123,    0,    0,    0,
    0,    0,    0,    0,    0,   95,   96,   97,   98,    0,
   81,    0,   99,  100,    0,    0,    0,  122,  123,   71,
    0,    0,    0,    0,   71,   71,    0,   71,   71,   71,
    0,    0,    0,    0,    0,    0,    0,    0,   65,   65,
   65,   65,   71,   71,   71,   65,   65,    0,    0,    0,
   65,   65,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   60,   60,   60,   60,    0,    0,
    0,   60,   60,   71,   70,    0,   60,   60,    0,   70,
   70,    0,   70,   70,   70,    0,    0,    0,    0,    0,
    0,    0,   54,    0,   54,   54,   54,   70,   70,   70,
    0,   58,    0,   58,   58,   58,    0,    0,    0,    0,
   54,   54,   54,   54,    0,    0,    0,    0,    0,   58,
   58,   58,   58,    0,    0,    0,    0,    0,   70,    0,
   78,    0,    0,   78,   61,   61,   61,   61,    0,    0,
    0,   61,   61,    0,   54,    0,   61,   61,   78,   78,
   78,   78,   77,   58,    0,   77,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   77,   77,   77,   77,    0,    0,   74,    0,    0,   74,
    0,    0,   78,    0,    0,   81,   81,   81,   81,    0,
    0,    0,   81,   81,   74,   74,   74,   74,    0,   81,
   81,    0,   76,    0,   77,   76,    0,    0,    0,    0,
    0,    0,   80,    0,    0,   80,    0,    0,    0,    0,
   76,   76,   76,   76,    0,    0,    0,    0,   74,    0,
   80,   80,   80,   80,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   71,   71,   71,   71,   76,    0,    0,   71,   71,    0,
    0,    0,   71,   71,   80,    0,    0,    0,    0,    0,
    0,   79,    0,    0,   79,    0,    0,    0,    0,    0,
   73,    0,    0,   73,    0,    0,    0,    0,    0,   79,
   79,   79,   79,    0,    0,    0,    0,    0,   73,   73,
   73,   73,    0,    0,    0,   70,   70,   70,   70,    0,
    0,    0,   70,   70,    0,    0,    0,   70,   70,   54,
   54,   54,   54,   79,    0,    0,   54,   54,   58,   58,
   58,   58,   73,   54,   54,   58,   58,    0,    0,    0,
    0,    0,   58,   58,    0,    0,    0,    0,   75,    0,
    0,   75,    0,    0,    0,    0,    0,   78,   78,   78,
   78,    0,    0,    0,   78,   78,   75,   75,   75,   75,
    0,   78,   78,    0,    0,    0,    0,    0,    0,   77,
   77,   77,   77,    0,    0,    0,   77,   77,    0,    0,
    0,    0,    0,   77,   77,    0,    0,    0,    0,    0,
   75,    0,    0,   74,   74,   74,   74,    0,    0,    0,
   74,   74,    0,    0,    0,    0,    0,   74,   74,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   76,
   76,   76,   76,    0,    0,    0,   76,   76,    0,   80,
   80,   80,   80,   76,   76,    0,   80,   80,    0,    0,
   62,    0,    0,   80,   80,   62,   62,    0,   62,   62,
   62,    0,   63,    0,    0,    0,    0,   63,   63,    0,
   63,   63,   63,   62,   62,   62,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   63,   63,   63,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   79,   79,
   79,   79,    0,    0,   62,   79,   79,   73,   73,   73,
   73,    0,   79,   79,   73,   73,   63,   83,   83,    0,
    0,   73,   73,   88,   89,   90,   91,   92,   94,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   83,    0,  120,  121,    0,    0,    0,  127,  128,    0,
    0,    0,    0,    0,    0,    0,  135,  136,  137,  138,
  139,  140,    0,    0,  143,  144,  145,  146,  147,  148,
  149,  150,    0,  152,    0,   75,   75,   75,   75,    0,
   83,    0,   75,   75,    0,   83,    0,    0,    0,   75,
   75,    0,    0,  162,  163,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  178,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   62,   62,   62,   62,    0,    0,    0,   62,   62,
    0,    0,    0,   63,   63,   63,   63,    0,    0,    0,
   63,   63,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         33,
   37,   46,   91,   91,  125,   42,   40,    2,   57,   46,
   47,   45,   37,   77,   10,   41,   52,   42,   43,  123,
   45,   46,   47,    2,   33,  258,  160,  161,   44,   24,
   79,   40,   44,   59,  258,  259,   45,   59,   33,   59,
   76,   37,  176,   59,   44,   24,   91,   59,  258,   33,
   44,  115,   48,   49,   91,   40,   40,  123,   44,   59,
   91,   45,   44,  280,  281,   59,   91,  265,  266,  267,
  119,   40,   67,   59,   33,  124,  257,   59,  258,  277,
  278,   40,   77,  265,  266,  267,   45,  265,  266,  267,
   93,  125,  258,   41,   44,   41,  278,   40,   40,   33,
  123,   40,  123,   40,   59,  169,   40,  171,   59,   41,
   59,   45,   59,  258,   59,   41,  125,  181,   59,   41,
  115,  264,   41,   91,   33,   91,   41,  180,   25,   24,
   44,   40,   53,   -1,   -1,   -1,   45,   -1,   -1,   -1,
   -1,  125,   -1,   33,  265,  266,  267,   -1,   -1,   33,
   40,   41,   -1,   -1,   -1,   45,   40,  278,   -1,   -1,
   -1,   45,   -1,   -1,  123,   -1,   -1,   -1,   -1,   33,
  258,   -1,   -1,   -1,   -1,   33,   40,   41,   -1,   -1,
   -1,   45,   40,   -1,   -1,   -1,   -1,   45,   -1,  123,
   -1,  280,  281,   -1,   33,   -1,   -1,   -1,   -1,   -1,
   33,   40,   -1,   -1,   -1,   -1,   45,   40,   -1,   -1,
   -1,   -1,   45,   -1,   -1,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,   33,  260,  261,  262,  263,
   -1,   -1,   40,   -1,   -1,  280,  281,   45,  272,  273,
   -1,  125,   -1,  280,  281,  279,  280,  281,  257,  258,
   33,  260,  261,  262,  263,  280,  281,   40,  280,  281,
  280,  281,   45,  272,  273,  123,   -1,   -1,   33,   -1,
  279,  280,  281,  257,  258,   40,  260,  261,  262,  263,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,
   -1,   -1,  125,   -1,   -1,  279,  280,  281,  257,  258,
   -1,  260,  261,  262,  263,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  272,  273,   -1,   -1,  125,   -1,   -1,
  279,  280,  281,  257,  258,   -1,  260,  261,  262,  263,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,
   -1,   -1,  125,   -1,   -1,  279,  280,  281,  257,  258,
   -1,  260,  261,  262,  263,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  272,  273,   -1,   -1,  257,  258,   -1,
  279,  280,  281,  257,  258,   -1,  260,  261,  262,  263,
   -1,   -1,  272,  273,   -1,   -1,   -1,   -1,  272,  273,
  280,  281,   -1,  257,  258,  279,  280,  281,   -1,  257,
  258,   -1,  260,  261,  262,  263,   -1,   -1,  272,  273,
   -1,   -1,   -1,   -1,  272,  273,  280,  281,  257,  258,
   -1,  279,  280,  281,  257,  258,   -1,  260,  261,  262,
  263,   -1,   -1,  272,  273,   -1,   -1,   -1,   -1,  272,
  273,  280,  281,   -1,   -1,   -1,  279,  280,  281,  257,
  258,   -1,  260,  261,  262,  263,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,   -1,   -1,
   -1,  279,  280,  281,  257,  258,   -1,  260,  261,  262,
  263,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,
  273,   -1,  257,  258,   -1,   -1,  279,  280,  281,   -1,
  265,  266,  267,   -1,   -1,   -1,   -1,  272,  273,   -1,
   -1,   -1,   -1,   37,   -1,  280,  281,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   60,   61,   62,   37,
   -1,   -1,   -1,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   60,   61,   62,   -1,   37,   91,   -1,   93,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,
   61,   62,   37,   91,   -1,   93,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   60,   61,   62,   -1,   37,
   91,   -1,   93,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   60,   61,   62,   37,   91,   -1,   93,   41,
   42,   43,   44,   45,   37,   47,   -1,   -1,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   93,   59,   60,   61,   62,
   37,   -1,   -1,   -1,   41,   42,   43,   44,   45,   37,
   47,   -1,   -1,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   93,   59,   60,   61,   62,   -1,   -1,   -1,   -1,
   93,   -1,   60,   -1,   62,   37,   -1,   -1,   -1,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   60,   -1,
   62,   -1,   -1,   91,  268,  269,  270,  271,   -1,   -1,
   -1,  275,  276,   -1,   -1,   -1,  280,  281,  282,  283,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
  268,  269,  270,  271,   -1,   -1,   -1,  275,  276,   -1,
   -1,   -1,   -1,   -1,  282,  283,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  268,  269,  270,
  271,   -1,   -1,   -1,  275,  276,   -1,   -1,   -1,   37,
   -1,  282,  283,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,  268,  269,  270,  271,   -1,   -1,   -1,
  275,  276,   60,   61,   62,   -1,   -1,  282,  283,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  268,  269,  270,  271,   -1,   -1,   -1,  275,  276,   -1,
   -1,   -1,   -1,   91,  282,  283,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  268,  269,  270,  271,
   -1,   -1,   -1,  275,  276,  268,  269,  270,  271,   -1,
  282,  283,  275,  276,   -1,   -1,   -1,   -1,   -1,  282,
  283,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  268,  269,  270,  271,   -1,   -1,   -1,  275,  276,
  268,  269,  270,  271,   -1,  282,  283,  275,  276,   -1,
   -1,   -1,  280,  281,   -1,  283,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  268,  269,  270,  271,
   -1,   -1,   -1,  275,  276,   -1,   37,   -1,  280,  281,
  282,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   -1,   60,
   -1,   62,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   60,   -1,   62,   37,   -1,   -1,   -1,   41,   42,   43,
   91,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   -1,
   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  268,  269,  270,  271,   -1,   -1,   -1,  275,  276,   -1,
   37,   -1,  280,  281,   41,   42,   43,   91,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   -1,   60,   -1,   62,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   59,   60,   -1,   62,   42,   43,   -1,
   45,   46,   47,   -1,   91,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   60,   -1,   62,   41,   42,
   43,   -1,   45,   46,   47,   91,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   37,   93,   -1,
   -1,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   60,   61,   62,   37,   -1,   -1,   -1,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,  268,  269,  270,
  271,   -1,   -1,   -1,  275,  276,   60,   61,   62,  280,
  281,   91,   -1,   -1,   -1,   -1,   -1,   -1,  268,  269,
  270,  271,   -1,   -1,   -1,  275,  276,   -1,   -1,   -1,
  280,  281,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   -1,   -1,   -1,   -1,  268,  269,  270,  271,   -1,   -1,
   -1,  275,  276,   37,   -1,   -1,  280,  281,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  268,  269,  270,  271,   -1,   -1,   -1,  275,  276,
   -1,   -1,   -1,  280,  281,   -1,   -1,   91,   41,   -1,
   -1,   44,  268,  269,  270,  271,   -1,   -1,   -1,  275,
  276,   -1,   -1,   -1,  280,  281,   59,   60,   61,   62,
   -1,   -1,   -1,  268,  269,  270,  271,   -1,   -1,   -1,
  275,  276,   -1,   -1,   -1,  280,  281,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  268,  269,  270,  271,   -1,
   93,   -1,  275,  276,   -1,   -1,   -1,  280,  281,   37,
   -1,   -1,   -1,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  268,  269,
  270,  271,   60,   61,   62,  275,  276,   -1,   -1,   -1,
  280,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  268,  269,  270,  271,   -1,   -1,
   -1,  275,  276,   91,   37,   -1,  280,  281,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   41,   -1,   43,   44,   45,   60,   61,   62,
   -1,   41,   -1,   43,   44,   45,   -1,   -1,   -1,   -1,
   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   41,   -1,   -1,   44,  268,  269,  270,  271,   -1,   -1,
   -1,  275,  276,   -1,   93,   -1,  280,  281,   59,   60,
   61,   62,   41,   93,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   60,   61,   62,   -1,   -1,   41,   -1,   -1,   44,
   -1,   -1,   93,   -1,   -1,  268,  269,  270,  271,   -1,
   -1,   -1,  275,  276,   59,   60,   61,   62,   -1,  282,
  283,   -1,   41,   -1,   93,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   59,   60,   61,   62,   -1,   -1,   -1,   -1,   93,   -1,
   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  268,  269,  270,  271,   93,   -1,   -1,  275,  276,   -1,
   -1,   -1,  280,  281,   93,   -1,   -1,   -1,   -1,   -1,
   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   59,   60,
   61,   62,   -1,   -1,   -1,  268,  269,  270,  271,   -1,
   -1,   -1,  275,  276,   -1,   -1,   -1,  280,  281,  268,
  269,  270,  271,   93,   -1,   -1,  275,  276,  268,  269,
  270,  271,   93,  282,  283,  275,  276,   -1,   -1,   -1,
   -1,   -1,  282,  283,   -1,   -1,   -1,   -1,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,  268,  269,  270,
  271,   -1,   -1,   -1,  275,  276,   59,   60,   61,   62,
   -1,  282,  283,   -1,   -1,   -1,   -1,   -1,   -1,  268,
  269,  270,  271,   -1,   -1,   -1,  275,  276,   -1,   -1,
   -1,   -1,   -1,  282,  283,   -1,   -1,   -1,   -1,   -1,
   93,   -1,   -1,  268,  269,  270,  271,   -1,   -1,   -1,
  275,  276,   -1,   -1,   -1,   -1,   -1,  282,  283,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  268,
  269,  270,  271,   -1,   -1,   -1,  275,  276,   -1,  268,
  269,  270,  271,  282,  283,   -1,  275,  276,   -1,   -1,
   37,   -1,   -1,  282,  283,   42,   43,   -1,   45,   46,
   47,   -1,   37,   -1,   -1,   -1,   -1,   42,   43,   -1,
   45,   46,   47,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  268,  269,
  270,  271,   -1,   -1,   91,  275,  276,  268,  269,  270,
  271,   -1,  282,  283,  275,  276,   91,   56,   57,   -1,
   -1,  282,  283,   62,   63,   64,   65,   66,   67,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   79,   -1,   81,   82,   -1,   -1,   -1,   86,   87,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   97,   98,
   99,  100,   -1,   -1,  103,  104,  105,  106,  107,  108,
  109,  110,   -1,  112,   -1,  268,  269,  270,  271,   -1,
  119,   -1,  275,  276,   -1,  124,   -1,   -1,   -1,  282,
  283,   -1,   -1,  132,  133,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  173,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  268,  269,  270,  271,   -1,   -1,   -1,  275,  276,
   -1,   -1,   -1,  268,  269,  270,  271,   -1,   -1,   -1,
  275,  276,
};
}
final static short YYFINAL=1;
final static short YYMAXTOKEN=285;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'!'",null,null,null,"'%'",null,null,"'('","')'","'*'","'+'",
"','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,null,
"';'","'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,"'['",null,"']'",null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,"CTE_ENTERA","ID","MAIN","READ",
"WRITE","WHILE","IF","ELSE","INT","DOUBLE","CHAR","IGUALDAD","DISTINTO",
"MAYORIGUAL","MENORIGUAL","CTE_REAL","CTE_CARACTER","CTE_STRING","O","Y","VOID",
"STRUCT","RETURN","MASMAS","MENOSMENOS","INTERROG","DOSPUNTOS","CONDICIONELSE",
"MENOSUNARIO",
};
final static String yyrule[] = {
"$accept : programa",
"programa : definiciones main",
"main : VOID MAIN '{' defvariables sentencias '}'",
"defvariables : defvariables defvariable",
"defvariables :",
"defvariable : tipoSimple variables ';'",
"defvariable : tipoComplejo variables ';'",
"definiciones : definiciones definicion",
"definiciones :",
"definicion : tipoSimple variables ';'",
"definicion : tipoComplejo variables ';'",
"definicion : defFuncion",
"variables : ID",
"variables : variables ',' ID",
"sentencias : sentencias sentencia",
"sentencias :",
"sentencia : expresion '=' expresion ';'",
"sentencia : READ expresiones ';'",
"sentencia : WRITE expresiones ';'",
"sentencia : condicion",
"sentencia : while",
"sentencia : RETURN expresion ';'",
"sentencia : ID '(' expresiones ')' ';'",
"sentencia : ID '(' ')' ';'",
"sentencia : expresion MASMAS ';'",
"sentencia : expresion MENOSMENOS ';'",
"sentencia : MASMAS expresion ';'",
"sentencia : MENOSMENOS expresion ';'",
"while : WHILE '(' expresion ')' sentencia",
"while : WHILE '(' expresion ')' '{' sentencias '}'",
"condicion : IF '(' expresion ')' sentencia condicion2",
"condicion : IF '(' expresion ')' '{' sentencias '}' condicion2",
"condicion2 : ELSE sentencia",
"condicion2 : ELSE '{' sentencias '}'",
"condicion2 :",
"expresiones : expresion",
"expresiones : expresion ',' expresiones",
"defFuncion : tipoSimple ID '(' parametros ')' '{' defvariables sentencias '}'",
"defFuncion : VOID ID '(' parametros ')' '{' defvariables sentencias '}'",
"tipo : tipoSimple",
"tipo : tipoComplejo",
"tipoSimple : INT",
"tipoSimple : DOUBLE",
"tipoSimple : CHAR",
"tipoComplejo : tipo '[' CTE_ENTERA ']'",
"tipoComplejo : STRUCT '{' campos '}'",
"campo : tipo variables ';'",
"campos : campos campo",
"campos :",
"parametros : parametro parametros2",
"parametros :",
"parametros2 : ',' parametro parametros2",
"parametros2 :",
"parametro : tipoSimple ID",
"expresion : expresion '+' expresion",
"expresion : expresion '*' expresion",
"expresion : expresion '/' expresion",
"expresion : expresion '%' expresion",
"expresion : expresion '-' expresion",
"expresion : '-' expresion",
"expresion : expresion MASMAS",
"expresion : expresion MENOSMENOS",
"expresion : MASMAS expresion",
"expresion : MENOSMENOS expresion",
"expresion : CTE_ENTERA",
"expresion : ID",
"expresion : CTE_CARACTER",
"expresion : CTE_REAL",
"expresion : expresion '[' expresion ']'",
"expresion : '(' expresion ')'",
"expresion : ID '(' expresiones ')'",
"expresion : ID '(' ')'",
"expresion : '(' tipoSimple ')' expresion",
"expresion : expresion '>' expresion",
"expresion : expresion MAYORIGUAL expresion",
"expresion : expresion '<' expresion",
"expresion : expresion MENORIGUAL expresion",
"expresion : expresion DISTINTO expresion",
"expresion : expresion IGUALDAD expresion",
"expresion : expresion Y expresion",
"expresion : expresion O expresion",
"expresion : '!' expresion",
"expresion : expresion '.' ID",
"expresion : '(' expresion INTERROG expresion DOSPUNTOS expresion ')'",
};

//#line 260 "..\..\src\sintactico\sinj.y"

// * Código Java
// * Se crea una clase "Parser", lo que aquí ubiquemos será:
//	- Atributos, si son variables
//	- Métodos, si son funciones
//   de la clase "Parser"

// * Estamos obligados a implementar:
//	int yylex()
//	void yyerror(String)

// * Referencia al analizador léxico
private Lexico lexico;

// Declaro el NodoAST
public NodoAST ast;



// * Llamada al analizador léxico
private int yylex () {
    int token=0;
    try { 
	token=lexico.yylex(); 
    } catch(Throwable e) {
	    System.err.println ("Error Léxico en línea " + lexico.getYyline()+
		" y columna "+lexico.getYycolumn()+":\n\t"+e); 
    }
    return token;
}

// * Manejo de Errores Sintácticos
public void yyerror (String error) {
    /*System.err.println ("Error Sintáctico en línea " + lexico.getYyline()+
		" y columna "+lexico.getYycolumn()+":\n\t"+error);*/
		new TipoError("Error sintáctico en la línea " + lexico.getYyline() + " y columna " + lexico.getYycolumn() + ":\n\t" + error, new TipoError());
		
}

// * El yylval no es un atributo público
public Object getYylval() {
    	return yylval;
}
public void setYylval(Object yylval) {
        this.yylval = yylval;
}

// * Constructor del Sintáctico
public Parser(Lexico lexico) {
	this.lexico = lexico;
	lexico.setParser(this);
}

//#line 810 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 61 "..\..\src\sintactico\sinj.y"
{ List<Definicion> programa = new ArrayList<Definicion>();
                                          programa.addAll((List<Definicion>) val_peek(1));
                                          programa.add((DefinicionFuncion)val_peek(0));
                                          ast=new Programa(lexico.getYyline(), lexico.getYycolumn(), programa);   }
break;
case 2:
//#line 67 "..\..\src\sintactico\sinj.y"
{ List<Sentencia> listaSentencias = (List<Sentencia>) val_peek(2);
																		listaSentencias.addAll((List<Sentencia>) val_peek(1));  
																		yyval = new DefinicionFuncion(lexico.getYyline(), lexico.getYycolumn(), "main", new TipoFuncion(TipoVoid.tipoVoid, new ArrayList<DefVariable>()) , listaSentencias);    }
break;
case 3:
//#line 72 "..\..\src\sintactico\sinj.y"
{ List<DefVariable> definiciones = (List<DefVariable>)val_peek(1); definiciones.addAll((List<DefVariable>) val_peek(0)); yyval=definiciones;	}
break;
case 4:
//#line 73 "..\..\src\sintactico\sinj.y"
{ yyval=new ArrayList<DefVariable>();	}
break;
case 5:
//#line 77 "..\..\src\sintactico\sinj.y"
{ List<DefVariable> definiciones = new ArrayList<DefVariable>(); 
                                             List<String> variables = (List<String>)val_peek(1);
                                             for(String st : variables){
                                             DefVariable dV = new DefVariable(lexico.getYyline(), lexico.getYycolumn(), st, (Tipo)val_peek(2));
                                             if(definiciones.contains(dV)){ /*ERROR*/
                                                    new TipoError("Variable Repetida: " + st, dV);
                                             } else {definiciones.add(dV);} } yyval=definiciones;    }
break;
case 6:
//#line 85 "..\..\src\sintactico\sinj.y"
{ List<DefVariable> definiciones = new ArrayList<DefVariable>(); 
                                             List<String> variables = (List<String>)val_peek(1);
                                             for(String st : variables){
                                              DefVariable dV = new DefVariable(lexico.getYyline(), lexico.getYycolumn(), st, (Tipo)val_peek(2));
                                             if(definiciones.contains(dV)){ /*ERROR*/
                                                    new TipoError("Variable Repetida: " + st, dV);
                                             } else {definiciones.add(dV);}  } yyval=definiciones;    }
break;
case 7:
//#line 94 "..\..\src\sintactico\sinj.y"
{ ((List<Definicion>) val_peek(1)).addAll((List<Definicion>)val_peek(0)); yyval = val_peek(1); }
break;
case 8:
//#line 95 "..\..\src\sintactico\sinj.y"
{ yyval = new ArrayList<Definicion>();	}
break;
case 9:
//#line 97 "..\..\src\sintactico\sinj.y"
{ List<DefVariable> definiciones = new ArrayList<DefVariable>(); 
                                             List<String> variables = (List<String>)val_peek(1);
                                             for(String st : variables){
                                             DefVariable dV = new DefVariable(lexico.getYyline(), lexico.getYycolumn(), st, (Tipo)val_peek(2));
                                             if(definiciones.contains(dV)){ /*ERROR*/
                                                    new TipoError("Variable Repetida: " + st, dV);
                                             } else {definiciones.add(dV);} } yyval=definiciones;    }
break;
case 10:
//#line 105 "..\..\src\sintactico\sinj.y"
{ List<DefVariable> definiciones = new ArrayList<DefVariable>(); 
                                             List<String> variables = (List<String>)val_peek(1);
                                             for(String st : variables){
                                              DefVariable dV = new DefVariable(lexico.getYyline(), lexico.getYycolumn(), st, (Tipo)val_peek(2));
                                             if(definiciones.contains(dV)){ /*ERROR*/
                                                    new TipoError("Variable Repetida: " + st, dV);
                                             } else {definiciones.add(dV);}  } yyval=definiciones;    }
break;
case 11:
//#line 112 "..\..\src\sintactico\sinj.y"
{ List<DefinicionFuncion> listaFuncion = new ArrayList<DefinicionFuncion>(); listaFuncion.add((DefinicionFuncion)val_peek(0)); yyval=listaFuncion;	}
break;
case 12:
//#line 115 "..\..\src\sintactico\sinj.y"
{ List<String> variables = new ArrayList<String>(); variables.add((String)val_peek(0)); yyval=variables;	}
break;
case 13:
//#line 116 "..\..\src\sintactico\sinj.y"
{ List<String> variables = (List<String>)val_peek(2); variables.add((String) val_peek(0)); 
         								 yyval=variables;}
break;
case 14:
//#line 120 "..\..\src\sintactico\sinj.y"
{ List<Sentencia> sentencias = (List<Sentencia>)val_peek(1); sentencias.add((Sentencia)val_peek(0)); yyval=sentencias;	}
break;
case 15:
//#line 121 "..\..\src\sintactico\sinj.y"
{ yyval=new ArrayList<Sentencia>();	}
break;
case 16:
//#line 129 "..\..\src\sintactico\sinj.y"
{ yyval=new Asignacion(lexico.getYyline(), lexico.getYycolumn(), (Expresion)val_peek(3), (Expresion)val_peek(1));    }
break;
case 17:
//#line 130 "..\..\src\sintactico\sinj.y"
{ yyval=new Lectura(lexico.getYyline(), lexico.getYycolumn(), (List<Expresion>)val_peek(1));      }
break;
case 18:
//#line 131 "..\..\src\sintactico\sinj.y"
{ yyval=new Escritura(lexico.getYyline(), lexico.getYycolumn(), (List<Expresion>)val_peek(1));    }
break;
case 21:
//#line 134 "..\..\src\sintactico\sinj.y"
{ yyval=new Return (lexico.getYyline(), lexico.getYycolumn(),(Expresion) val_peek(1));    }
break;
case 22:
//#line 135 "..\..\src\sintactico\sinj.y"
{yyval=new InvocacionProcedimiento(lexico.getYyline(), lexico.getYycolumn(), new Variable(lexico.getYyline(), lexico.getYyline(), (String) val_peek(4)), (List<Expresion>) val_peek(2));    }
break;
case 23:
//#line 136 "..\..\src\sintactico\sinj.y"
{yyval=new InvocacionProcedimiento(lexico.getYyline(), lexico.getYycolumn(), new Variable(lexico.getYyline(), lexico.getYyline(), (String) val_peek(3)), new ArrayList<Expresion>());    }
break;
case 24:
//#line 137 "..\..\src\sintactico\sinj.y"
{ yyval = new SumatorioUnitario(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(2)); }
break;
case 25:
//#line 138 "..\..\src\sintactico\sinj.y"
{ yyval = new RestaUnitaria(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(2));	}
break;
case 26:
//#line 139 "..\..\src\sintactico\sinj.y"
{ yyval = new SumatorioUnitarioBef(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(1));	}
break;
case 27:
//#line 140 "..\..\src\sintactico\sinj.y"
{ yyval = new RestaUnitariaBef(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(1));	}
break;
case 28:
//#line 145 "..\..\src\sintactico\sinj.y"
{ List<Sentencia> sentencia = new ArrayList<Sentencia>();
                                                          sentencia.add((Sentencia) val_peek(0));
                                                          yyval = new SentenciaWhile(lexico.getYyline(), lexico.getYycolumn(),(Expresion) val_peek(2), sentencia); }
break;
case 29:
//#line 148 "..\..\src\sintactico\sinj.y"
{yyval = new SentenciaWhile(lexico.getYyline(), lexico.getYycolumn(),
                                                                (Expresion) val_peek(4), (List<Sentencia>) val_peek(1)); }
break;
case 30:
//#line 154 "..\..\src\sintactico\sinj.y"
{ List<Sentencia> sentenciaIf = new ArrayList<Sentencia>(); sentenciaIf.add((Sentencia) val_peek(1)); yyval = new SentenciaIF(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(3), sentenciaIf , (List<Sentencia>) val_peek(0));    }
break;
case 31:
//#line 155 "..\..\src\sintactico\sinj.y"
{ List<Sentencia> sentenciaIf = new ArrayList<Sentencia>(); sentenciaIf.addAll((List<Sentencia>) val_peek(2)); yyval = new SentenciaIF(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(5), sentenciaIf, (List<Sentencia>) val_peek(0));    }
break;
case 32:
//#line 158 "..\..\src\sintactico\sinj.y"
{ List<Sentencia> sentenciaUnica = new ArrayList<Sentencia>(); sentenciaUnica.add((Sentencia) val_peek(0)); yyval = sentenciaUnica; }
break;
case 33:
//#line 159 "..\..\src\sintactico\sinj.y"
{ yyval=(List<Sentencia>)val_peek(1);    }
break;
case 34:
//#line 160 "..\..\src\sintactico\sinj.y"
{ yyval=new ArrayList<Sentencia>();    }
break;
case 35:
//#line 163 "..\..\src\sintactico\sinj.y"
{ List<Expresion> expresiones = new ArrayList<Expresion>(); expresiones.add((Expresion)val_peek(0)); yyval=expresiones; }
break;
case 36:
//#line 164 "..\..\src\sintactico\sinj.y"
{ List<Expresion> expresiones = (List<Expresion>)val_peek(0); expresiones.add((Expresion)val_peek(2)); yyval=expresiones; }
break;
case 37:
//#line 170 "..\..\src\sintactico\sinj.y"
{ List<Sentencia> listaSentencias = (List<Sentencia>) val_peek(2);
																		listaSentencias.addAll((List<Sentencia>) val_peek(1));  
																		yyval = new DefinicionFuncion(lexico.getYyline(), lexico.getYycolumn(), (String) val_peek(7), new TipoFuncion((Tipo) val_peek(8), (List<DefVariable>) val_peek(5)), listaSentencias);    }
break;
case 38:
//#line 173 "..\..\src\sintactico\sinj.y"
{ List<Sentencia> listaSentencias = (List<Sentencia>) val_peek(2);
																		listaSentencias.addAll((List<Sentencia>) val_peek(1));  
																		yyval = new DefinicionFuncion(lexico.getYyline(), lexico.getYycolumn(), (String) val_peek(7), new TipoFuncion(TipoVoid.tipoVoid, (List<DefVariable>) val_peek(5)), listaSentencias);    }
break;
case 39:
//#line 179 "..\..\src\sintactico\sinj.y"
{ yyval = (Tipo) val_peek(0);	}
break;
case 40:
//#line 180 "..\..\src\sintactico\sinj.y"
{ yyval = (Tipo) val_peek(0);	}
break;
case 41:
//#line 183 "..\..\src\sintactico\sinj.y"
{ yyval=TipoEntero.tipoEntero; }
break;
case 42:
//#line 184 "..\..\src\sintactico\sinj.y"
{ yyval=TipoReal.tipoReal; }
break;
case 43:
//#line 185 "..\..\src\sintactico\sinj.y"
{ yyval=TipoCaracter.tipoCaracter; }
break;
case 44:
//#line 188 "..\..\src\sintactico\sinj.y"
{ yyval=new TipoArray((int)val_peek(1), (Tipo) val_peek(3)); }
break;
case 45:
//#line 189 "..\..\src\sintactico\sinj.y"
{ yyval=new TipoRegistro((List<Campo>) val_peek(1));    }
break;
case 46:
//#line 193 "..\..\src\sintactico\sinj.y"
{ List<Campo> definiciones = new ArrayList<Campo>(); 
                                             List<String> variables = (List<String>)val_peek(1);
                                             for(String st : variables){definiciones.add(new Campo(lexico.getYyline(), lexico.getYycolumn(), st, (Tipo)val_peek(2)));} yyval=definiciones; }
break;
case 47:
//#line 198 "..\..\src\sintactico\sinj.y"
{ List<Campo> definiciones = (List<Campo>)val_peek(1); definiciones.addAll((List<Campo>) val_peek(0)); yyval=definiciones; }
break;
case 48:
//#line 199 "..\..\src\sintactico\sinj.y"
{ yyval=new ArrayList<Campo>();  }
break;
case 49:
//#line 205 "..\..\src\sintactico\sinj.y"
{ List<DefVariable> parametros = (List<DefVariable>) val_peek(0); parametros.add((DefVariable)val_peek(1)); yyval = parametros; }
break;
case 50:
//#line 206 "..\..\src\sintactico\sinj.y"
{ yyval = new ArrayList<DefVariable>(); }
break;
case 51:
//#line 209 "..\..\src\sintactico\sinj.y"
{ List<DefVariable> parametros = (List<DefVariable>) val_peek(0); parametros.add((DefVariable)val_peek(1)); yyval = parametros; }
break;
case 52:
//#line 210 "..\..\src\sintactico\sinj.y"
{ yyval = new ArrayList<DefVariable>(); }
break;
case 53:
//#line 213 "..\..\src\sintactico\sinj.y"
{ yyval = new DefVariable(lexico.getYyline(), lexico.getYycolumn(), (String)val_peek(0), (Tipo) val_peek(1));}
break;
case 54:
//#line 217 "..\..\src\sintactico\sinj.y"
{ yyval=new Aritmetica(lexico.getYyline(), lexico.getYycolumn(), (Expresion)val_peek(2), "+", (Expresion)val_peek(0)); }
break;
case 55:
//#line 218 "..\..\src\sintactico\sinj.y"
{ yyval=new Aritmetica(lexico.getYyline(), lexico.getYycolumn(), (Expresion)val_peek(2), "*", (Expresion)val_peek(0)); }
break;
case 56:
//#line 219 "..\..\src\sintactico\sinj.y"
{ yyval=new Aritmetica(lexico.getYyline(), lexico.getYycolumn(), (Expresion)val_peek(2), "/", (Expresion)val_peek(0)); }
break;
case 57:
//#line 220 "..\..\src\sintactico\sinj.y"
{ yyval=new Aritmetica(lexico.getYyline(), lexico.getYycolumn(), (Expresion)val_peek(2), "%", (Expresion)val_peek(0)); }
break;
case 58:
//#line 221 "..\..\src\sintactico\sinj.y"
{ yyval=new Aritmetica(lexico.getYyline(), lexico.getYycolumn(), (Expresion)val_peek(2), "-", (Expresion)val_peek(0)); }
break;
case 59:
//#line 222 "..\..\src\sintactico\sinj.y"
{ yyval=new MenosUnario(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(0)); }
break;
case 60:
//#line 223 "..\..\src\sintactico\sinj.y"
{ yyval = new SumatorioUnitario(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(1)); }
break;
case 61:
//#line 224 "..\..\src\sintactico\sinj.y"
{ yyval = new RestaUnitaria(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(1));	}
break;
case 62:
//#line 225 "..\..\src\sintactico\sinj.y"
{ yyval = new SumatorioUnitarioBef(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(0));	}
break;
case 63:
//#line 226 "..\..\src\sintactico\sinj.y"
{ yyval = new RestaUnitariaBef(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(0));	}
break;
case 64:
//#line 227 "..\..\src\sintactico\sinj.y"
{ yyval=new LiteralEntero(lexico.getYyline(), lexico.getYycolumn(), (Integer)val_peek(0));}
break;
case 65:
//#line 228 "..\..\src\sintactico\sinj.y"
{ yyval=new Variable(lexico.getYyline(), lexico.getYycolumn(), (String)val_peek(0));    }
break;
case 66:
//#line 229 "..\..\src\sintactico\sinj.y"
{ yyval=new LiteralCaracter(lexico.getYyline(), lexico.getYycolumn(), (Character)val_peek(0));	}
break;
case 67:
//#line 230 "..\..\src\sintactico\sinj.y"
{ yyval = new LiteralReal(lexico.getYyline(), lexico.getYycolumn(), (Double) val_peek(0)); }
break;
case 68:
//#line 231 "..\..\src\sintactico\sinj.y"
{ yyval=new AccesoArray(lexico.getYyline(), lexico.getYycolumn(), (Expresion)val_peek(3), (Expresion) val_peek(1));  }
break;
case 69:
//#line 232 "..\..\src\sintactico\sinj.y"
{ yyval=(Expresion) val_peek(1);    }
break;
case 70:
//#line 233 "..\..\src\sintactico\sinj.y"
{ yyval=new InvocacionFuncion(lexico.getYyline(), lexico.getYycolumn(), new Variable(lexico.getYyline(), lexico.getYyline(), (String) val_peek(3)), (List<Expresion>) val_peek(1));     }
break;
case 71:
//#line 234 "..\..\src\sintactico\sinj.y"
{ yyval=new InvocacionFuncion(lexico.getYyline(), lexico.getYycolumn(), new Variable(lexico.getYyline(), lexico.getYyline(), (String) val_peek(2)), new ArrayList<Expresion>());     }
break;
case 72:
//#line 235 "..\..\src\sintactico\sinj.y"
{ yyval = new Cast(lexico.getYyline(), lexico.getYycolumn(), (Tipo) val_peek(2), (Expresion) val_peek(0));    }
break;
case 73:
//#line 236 "..\..\src\sintactico\sinj.y"
{ yyval = new Comparacion(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(2), ">", (Expresion) val_peek(0));    }
break;
case 74:
//#line 237 "..\..\src\sintactico\sinj.y"
{ yyval = new Comparacion(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(2), ">=", (Expresion) val_peek(0));    }
break;
case 75:
//#line 238 "..\..\src\sintactico\sinj.y"
{ yyval = new Comparacion(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(2), "<", (Expresion) val_peek(0));    }
break;
case 76:
//#line 239 "..\..\src\sintactico\sinj.y"
{ yyval = new Comparacion(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(2), "<=", (Expresion) val_peek(0));    }
break;
case 77:
//#line 240 "..\..\src\sintactico\sinj.y"
{ yyval = new Comparacion(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(2), "!=", (Expresion) val_peek(0));    }
break;
case 78:
//#line 241 "..\..\src\sintactico\sinj.y"
{ yyval = new Comparacion(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(2), "==", (Expresion) val_peek(0));    }
break;
case 79:
//#line 242 "..\..\src\sintactico\sinj.y"
{ yyval = new Logica(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(2), "&&", (Expresion) val_peek(0));    }
break;
case 80:
//#line 243 "..\..\src\sintactico\sinj.y"
{ yyval = new Logica(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(2), "||", (Expresion) val_peek(0));    }
break;
case 81:
//#line 244 "..\..\src\sintactico\sinj.y"
{ yyval = new Negacion(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(0));    }
break;
case 82:
//#line 245 "..\..\src\sintactico\sinj.y"
{ yyval = new AccesoCampo(lexico.getYyline(), lexico.getYycolumn(),(Expresion) val_peek(2), (String) val_peek(0));    }
break;
case 83:
//#line 246 "..\..\src\sintactico\sinj.y"
{ yyval = new OCondTernario(lexico.getYyline(), lexico.getYycolumn(), (Expresion) val_peek(5), (Expresion) val_peek(3), (Expresion) val_peek(1)); }
break;
//#line 1322 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
